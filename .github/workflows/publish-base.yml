name: publish-base

on:

  pull_request:
    branches:
    - master

  push:
    branches:
    - master

jobs:

  detect-changes:
    runs-on: [ubuntu-20.04]
    outputs:
      dockerfile-changes: ${{ steps.filter.outputs.changes }}
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 10

    - uses: dorny/paths-filter@v2
      id: filter
      with:
        base: 'main'
        filters: |
          Dockerfile:
            - 'Dockerfile.amd64'
          Dockerfile.base:
            - 'Dockerfile.arm64'

  lint_images:
    name: Lint images
    if: github.event_name == 'pull_request' && (needs.detect-changes.outputs.image-changes != '[]')
    runs-on: [ubuntu-20.04]
    needs: detect-changes
    continue-on-error: true
    strategy:
      matrix:
        dockerfile:
          - Dockerfile.amd64
          - Dockerfile.arm64
    steps:
      - uses: actions/checkout@v2.3.2
      - name: lint private images
        run: |
          docker run --rm -i -v ${PWD}:/repo:ro --workdir=/repo ghcr.io/hadolint/hadolint:v2.8.0-alpine sh -c "hadolint --config .hadolint.yaml ${{matrix.dockerfile}}"

  build-push-images:
    # if: github.ref == 'refs/heads/master' && github.event_name == 'push' && github.event.schedule == '0 0 * * 0'
    runs-on: [ubuntu-20.04]
    continue-on-error: true
    strategy:
      matrix:
        arch:
          - amd64
          - arm64
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 10

    - name: configure-credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Set outputs
      id: vars
      run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

    - name: install buildx
      id: buildx
      uses: crazy-max/ghaction-docker-buildx@v1
      with:
        version: latest

    - name: Build, tag, and push the image to Amazon ECR
      id: build-image
      #working-directory: private/${{matrix.private-images}}
      #,linux/arm64
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ matrix.image }}
      run: |
        VERSION=$(cat version.base)
        build.sh 
        echo "Matrix build details:"
        echo "${{matrix.image}}:$VERSION:${{github.event.number}}:${{steps.vars.outputs.sha_short}}:${{github.sha}}:$(pwd)"
        echo "Building ${ECR_REPOSITORY}"
        docker buildx build --build-arg DOCKER_ENV=development --build-arg DOCKER_BUILD=true -f Dockerfile.base -t $ECR_REGISTRY/$ECR_REPOSITORY:${{steps.vars.outputs.sha_short}} -t $ECR_REGISTRY/$ECR_REPOSITORY:${{github.sha}} -t $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION --platform linux/amd64 --push .
        echo "Pushed image to ECR."
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$VERSION"
